---
# tasks file for pki
- name: 检查pki是否存在
  stat:
    path: /etc/kubernetes/pki_json/ca-config.json
  register: pki_stat
  when: ansible_default_ipv4['address'] == m1

- name: 生成集群证书
  block:
    - name: 创建存放k8s和etcd证书的目录
      # shell: "mkdir -p /etc/etcd/ssl/ {{ pik_json }}"
      file:
        state: directory
        path: "{{ item }}"
      loop:
        - "{{ pki_dir }}"
        - "{{ ssl_dir }}"
      tags: ts1

    - name: 创建存放证书配置文件的目录
      # shell: "mkdir -p /etc/kubernetes/pki"
      file:
        state: directory
        path: "{{ pik_json }}"
      when: ansible_default_ipv4['address'] == m1

    - name: 拷贝cfssl文件
      copy:
        mode: +x
        src: "../../package/cfssl_1.6.4_linux_amd64"
        dest: /usr/local/bin/cfssl
      when: ansible_default_ipv4['address'] == m1

    - name: 拷贝cfssljson文件
      copy:
        mode: +x
        src: "../../package/cfssljson_1.6.4_linux_amd64"
        dest: /usr/local/bin/cfssljson
      when: ansible_default_ipv4['address'] == m1

    - name: 申请etcd的证书
      block:
        - name: 拷贝CA证书所需的基本配置文件
          template:
            src: ca-config.json.j2
            dest: "{{ pik_json }}ca-config.json"

        - name: etcd的根证书模块
          block:
            - name: 拷贝生成CA证书机构的CSR签名请求文件
              template:
                src: etcd-ca-csr.json.j2
                dest: "{{ pik_json }}etcd-ca-csr.json"

            - name: 根据配置文件etcd-ca-csr.json生成一个etcd的CA证书机构(根证书)
              shell:
                # chdir: "/etc/etcd/ssl/"
                cmd: "cfssl gencert -initca {{ pik_json }}etcd-ca-csr.json | cfssljson -bare {{ ssl_dir }}etcd-ca"

        - name: etcd证书模块
          block:
            - name: 拷贝生成etcd证书签名请求
              template:
                src: etcd-csr.json.j2
                dest: "{{ pik_json }}etcd-csr.json"

            - name: 生成etcd证书
              shell:
                # chdir: "/etc/etcd/ssl/"
                cmd: "cfssl gencert -ca={{ ssl_dir }}etcd-ca.pem -ca-key={{ ssl_dir }}etcd-ca-key.pem -config={{ pik_json }}ca-config.json -hostname={{ etcd_hosts }} -profile=kubernetes {{ pik_json }}etcd-csr.json | cfssljson -bare {{ ssl_dir }}etcd"
              # tags:

        - name: 拷贝etcd证书到其他节点
          ignore_errors: yes
          script:
            cmd: "./files/etcd_pki.sh"
          # shell:
          #   cmd: ""

      tags: ts
      when: ansible_default_ipv4['address'] == m1

    - name: 生成k8s相关证书===>>apiserver证书 .2
      block:
        - name: kubernetes的根证书模块
          block:
            - name: 拷贝ca-csr.json文件
              template:
                src: ca-csr.json.j2
                dest: "{{ pik_json }}ca-csr.json"

            - name: 生成kubernetes的CA机构证书
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -initca {{ pik_json }}ca-csr.json | cfssljson -bare {{ pki_dir }}ca"

        - name: Kubernetes API Server证书生成模块
          block:
            - name: 拷贝申请api server证书的配置文件
              template:
                src: apiserver-csr.json.j2
                dest: "{{ pik_json }}apiserver-csr.json"

            - name: 生成api server证书
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}ca.pem -ca-key={{ pki_dir }}ca-key.pem -config={{ pik_json }}ca-config.json -hostname={{ k8s_pki }} -profile=kubernetes {{ pik_json }}apiserver-csr.json | cfssljson -bare {{ pki_dir }}apiserver"

      when: ansible_default_ipv4['address'] == m1

    - name: 生成k8s相关证书===>>apiserver聚合证书 .3
      block:
        - name: apiserver聚合证书的根证书模块
          block:
            - name: 拷贝front-proxy-ca-csr.json文件
              template:
                src: front-proxy-ca-csr.json.j2
                dest: "{{ pik_json }}front-proxy-ca-csr.json"

            - name: 生成apiserver聚合证书的根证书
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -initca {{ pik_json }}front-proxy-ca-csr.json | cfssljson -bare {{ pki_dir }}front-proxy-ca"

        - name: apiserver聚合证书生成模块
          block:
            - name: 拷贝front-proxy-client-csr.json文件
              template:
                src: front-proxy-client-csr.json.j2
                dest: "{{ pik_json }}front-proxy-client-csr.json"

            - name: 生成apiserver聚合证书
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}front-proxy-ca.pem -ca-key={{ pki_dir }}front-proxy-ca-key.pem -config={{ pik_json }}ca-config.json -profile=kubernetes   {{ pik_json }}front-proxy-client-csr.json | cfssljson -bare {{ pki_dir }}front-proxy-client"

      when: ansible_default_ipv4['address'] == m1

    - name: 生成controller-manage的证书并设置相关环境 .4
      block:
        - name: 生成controller-manage证书模块
          block:
            - name: 拷贝manager-csr.json配置文件
              template:
                src: manager-csr.json.j2
                dest: "{{ pik_json }}manager-csr.json"

            - name: 生成controller-manage证书
              shell:
                # chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}ca.pem -ca-key={{ pki_dir }}ca-key.pem -config={{ pik_json }}ca-config.json -profile=kubernetes {{ pik_json }}manager-csr.json | cfssljson -bare {{ pki_dir }}controller-manager"

        - name: controller-manager环境设置
          block:
            - name: 设置controller-manager的集群项 .4..1
              shell:
                cmd: "kubectl config set-cluster kubernetes --certificate-authority={{ pki_dir }}ca.pem --embed-certs=true --server=https://{{ vip }}:9443 --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig"

            - name: 设置controller-manager的环境项 .4..2
              shell:
                cmd: "kubectl config set-context system:kube-controller-manager@kubernetes --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig"

            - name: 设置controller-manager的用户项 .4..3
              shell:
                cmd: "kubectl config set-credentials system:kube-controller-manager --client-certificate={{ pki_dir }}controller-manager.pem --client-key={{ pki_dir }}controller-manager-key.pem --embed-certs=true --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig"

            - name: 使用controller-manager.kubeconfig这个配置文件 .4..4
              shell:
                cmd: "kubectl config use-context system:kube-controller-manager@kubernetes --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig"
          tags: env

      when: ansible_default_ipv4['address'] == m1

    - name: 生成kube-scheduler的证书并设置相关环境 .5
      block:
        - name: 生成kube-scheduler证书模块
          block:
            - name: 拷贝scheduler-csr.json配置文件 .5..1
              template:
                src: scheduler-csr.json.j2
                dest: "{{ pik_json }}scheduler-csr.json"

            - name: 生成kube-scheduler的证书 .5..2
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}ca.pem -ca-key={{ pki_dir }}ca-key.pem -config={{ pik_json }}ca-config.json -profile=kubernetes {{ pik_json }}scheduler-csr.json | cfssljson -bare {{ pki_dir }}scheduler"

        - name: scheduler环境设置
          block:
            - name: 设置scheduler的集群项 .5..1
              shell:
                cmd: "kubectl config set-cluster kubernetes --certificate-authority={{ pki_dir }}ca.pem --embed-certs=true --server=https://{{ vip }}:9443 --kubeconfig=/etc/kubernetes/scheduler.kubeconfig"

            - name: 设置scheduler的环境项 .5..2
              shell:
                cmd: "kubectl config set-credentials system:kube-scheduler --client-certificate={{ pki_dir }}scheduler.pem --client-key={{ pki_dir }}scheduler-key.pem --embed-certs=true --kubeconfig=/etc/kubernetes/scheduler.kubeconfig"

            - name: 设置scheduler的用户项 .5..3
              shell:
                cmd: "kubectl config set-context system:kube-scheduler@kubernetes --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=/etc/kubernetes/scheduler.kubeconfig"

            - name: 使用scheduler.kubeconfig这个配置文件 .5..4
              shell:
                cmd: "kubectl config use-context system:kube-scheduler@kubernetes --kubeconfig=/etc/kubernetes/scheduler.kubeconfig"
          tags: env

      when: ansible_default_ipv4['address'] == m1

    - name: 生成admin的证书配置 .6
      block:
        - name: admin证书模块
          block:
            - name: 拷贝admin-csr.json.j2文件
              template:
                src: admin-csr.json.j2
                dest: "{{ pik_json }}admin-csr.json"

            - name: 生成admin证书
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}ca.pem -ca-key={{ pki_dir }}ca-key.pem -config={{ pik_json }}ca-config.json -profile=kubernetes {{ pik_json }}admin-csr.json | cfssljson -bare {{ pki_dir }}admin"

        - name: admin环境设置
          block:
            - name: 设置admin的集群项 .6..1
              shell:
                cmd: "kubectl config set-cluster kubernetes --certificate-authority={{ pki_dir }}ca.pem --embed-certs=true --server=https://{{ vip }}:9443 --kubeconfig=/etc/kubernetes/admin.kubeconfig"

            - name: 设置admin的环境项 .6..2
              shell:
                cmd: "kubectl config set-credentials kubernetes-admin --client-certificate={{ pki_dir }}admin.pem --client-key={{ pki_dir }}admin-key.pem --embed-certs=true --kubeconfig=/etc/kubernetes/admin.kubeconfig"

            - name: 设置admin的用户项 .6..3
              shell:
                cmd: "kubectl config set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin --kubeconfig=/etc/kubernetes/admin.kubeconfig"

            - name: 使用admin.kubeconfig这个配置文件 .6..4
              shell:
                cmd: "kubectl config use-context kubernetes-admin@kubernetes  --kubeconfig=/etc/kubernetes/admin.kubeconfig"
          tags: env

      when: ansible_default_ipv4['address'] == m1

    - name: 创建kube-proxy证书 .7
      block:
        - name: kube-proxy证书模块
          block:
            - name: 拷贝kube-proxy-csr.json证书 .7..1
              template:
                src: kube-proxy-csr.json.j2
                dest: "{{ pik_json }}kube-proxy-csr.json"

            - name: 生成kube-proxy证书 .7..2
              shell:
                chdir: "{{ pki_dir }}"
                cmd: "cfssl gencert -ca={{ pki_dir }}ca.pem -ca-key={{ pki_dir }}ca-key.pem -config={{ pik_json }}ca-config.json -profile=kubernetes {{ pik_json }}kube-proxy-csr.json | cfssljson -bare {{ pki_dir }}kube-proxy"

        - name: kube-proxy环境设置
          block:
            - name: 设置kube-proxy的集群项 .7..1
              shell:
                cmd: "kubectl config set-cluster kubernetes --certificate-authority={{ pki_dir }}ca.pem --embed-certs=true --server=https://{{ vip }}:9443 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

            - name: 设置kube-proxy的环境项 .7..2
              shell:
                cmd: "kubectl config set-credentials kube-proxy --client-certificate={{ pki_dir }}kube-proxy.pem --client-key={{ pki_dir }}kube-proxy-key.pem --embed-certs=true --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

            - name: 设置kube-proxy的用户项 .7..3
              shell:
                cmd: "kubectl config set-context kube-proxy@kubernetes --cluster=kubernetes --user=kube-proxy --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

            - name: 使用kube-proxy.kubeconfig这个配置文件 .7..4
              shell:
                cmd: "kubectl config use-context kube-proxy@kubernetes  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"
          tags: env

      when: ansible_default_ipv4['address'] == m1

    - name: 创建ServiceAccount Key ——secret .8
      block:
        - name: 创建ServiceAccount Key模块
          block:
            - name: 生成私钥文件
              shell:
                cmd: "openssl genrsa -out {{ pki_dir }}sa.key 2048"

            - name: 从私钥中导出公钥
              shell:
                cmd: "openssl rsa -in {{ pki_dir }}sa.key -pubout -out {{ pki_dir }}sa.pub"

      when: ansible_default_ipv4['address'] == m1

    - name: 发送k8s证书到其他master节点
      script:
        cmd: "k8s_pki.sh"
      ignore_errors: yes
      when: ansible_default_ipv4['address'] == m1
      tags: tsp
  when: "pki_stat.stat.isreg is not defined"
