---
# tasks file for lb
- name: 安装keepalived和haproxy服务
  block:
    - dnf:
        update_cache: yes
        name: "haproxy,keepalived"
        state: installed
      when: ansible_pkg_mgr == "dnf"

    - apt:
        update_cache: yes
        name: "haproxy,keepalived"
        state: installed
      when: ansible_pkg_mgr == "apt"

- name: 拷贝haproxy配置文件
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    backup: yes
  changed_when: yes
  notify: rs haproxy

- name: 拷贝keepalived配置文件
  block:
    - name: 拷贝keepalived master配置文件
      template:
        src: keepalived.conf.master.j2
        dest: /etc/keepalived/keepalived.conf
        backup: yes
      when: ansible_default_ipv4['address'] == m1
      changed_when: yes
      notify: rs keepalived

    - name: 拷贝keepalived backup配置文件
      template:
        src: keepalived.conf.backup.j2
        dest: /etc/keepalived/keepalived.conf
        backup: yes
      when: ansible_default_ipv4['address'] != m1
      changed_when: yes
      notify: rs keepalived

- name: 拷贝健康检查脚本文件
  copy:
    src: check_apiserver.sh
    dest: /etc/keepalived/check_apiserver.sh
    mode: +x
    backup: yes

- meta: flush_handlers

- name: 等待VIP上线
  delegate_to: localhost
  wait_for:
    host: "{{ vip }}"
    port: "{{ vip_port }}"
    timeout: 60

# - name: 检查lb组件是否启动
#   block:
#     - name: 检查haproxy守护进程
#       block:
#         - name: 收集haproxy守护进程信息
#           ignore_errors: yes
#           shell:
#             cmd: "systemctl status haproxy | grep running "
#           register: haproxy

#         - name: 启动haproxy守护进程
#           systemd:
#             name: haproxy
#             state: restarted
#             enabled: true
#             daemon_reload: yes
#           when: haproxy.stdout == ""

#     - name: 检查keepalived守护进程
#       block:
#         - name: 收集keepalived守护进程信息
#           ignore_errors: yes
#           shell:
#             cmd: "systemctl status keepalived | grep running "
#           register: keepalived

#         - name: 启动keepalived守护进程
#           systemd:
#             name: keepalived
#             state: restarted
#             enabled: true
#             daemon_reload: yes
#           when: keepalived.stdout == ""

